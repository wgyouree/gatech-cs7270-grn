CS6241: Compiler Optimizations
``````````````````````````````
Project - Phase 1
`````````````````

Team Members:
Ravi Mangal, Natthu Bharambe and Greg Youree.

(1) Array bounds checks (upperbound) are introduced whenever we encounter a GetElementPtr instruction for a statically allocated array. The basic block contain
ing the instruction is broken into 2 blocks, the GetElementPtr instruction being in the second half, and a compare instruction introduced in the first block fo
llowed by a branch instruction, which is linked to an "exitBlock" in case the array bounds check fails. Program execution stops if control flow reaches the "ex
itBlock". This is performed during compilation by invoking the pass using opt.

(2) The built-in pass "gvn" performs global value numbering as well as partial redundancy elimination.

(3)
    a) Constructing e-SSA form: As stated in the paper, the first 3 types of constraints are taken care of in the normal SSA form. e-SSA incorporates the remai
ning two constraints of the form - x < y and check A[x]. In our implementation, check A[x] is actually represented by a compare instruction. 
    The idea behind inserting PI instructions is to create a new SSA variable, which in a way, stores information about which branches (and as a result of which, what inequalities exist) were taken along different control paths. In our implementation, at every compare instruction, we insert a new basic block before e
ach of its successors. Inside these basic blocks we insert PI instructions for each value involved in the compare instruction. PI instruction is of the form -
x = pifunction_<variableTypeID>(x);. This ensures a new SSA value is generated when 'mem2reg' pass is invoked.
    
    b) Constructing inequality graph:
    The graph consists of primarily two types of vertices: array length nodes and variables. Variables in turn can be PHI or non-PHI.
      (i) For every ArrayType AllocaInst, we create a new vertex in the graph which stores - the array length and a pointer to the actual instruction.
      (ii) For every PHI node, we have edges of weight 0 between the output and each of the incoming values. If an incoming value is constant, the output vertex is connected to all the array length vertices with weight = constant.value - Array length.


    c) Using the inequality graph to remove redundant array bounds checks:

	The ABCD algorithm traverses the inequality graph to determine which bounds checks are redundant. It makes use of two additional data structures. The first stores data about previous bounds checks, which is updated on each recurisve call to the "prove" method. The values stored are one of the following, True, Reduced, or False. The second is used to detect cycles. Two types of cycles can be detected, amplifying and "harmless." The algorithm uses two operations called meet and join. The meet operation chooses the maximum value, True > Reduced > False. While the join operation chooses the minimum value. These operations update the values of the checks stored in the first datastructure. The nodes in the graph store an inList, which contains all nodes which may reach the given node, and the value of the edge. If the value falls within a given range, then the edge can chosen as a shortest path. The distance of the shortest path is used to update the check information. At the conclusion of the algorithm, checks with values less than zero are determined to be redundant and can be safely removed.
