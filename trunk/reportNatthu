CS6241: Compiler Optimizations
``````````````````````````````
Project - Phase 1
`````````````````

(1) Array bounds checks (upperbound) are introduced whenever we encounter a GetElementPtr instruction for a statically allocated array. The basic block contain
ing the instruction is broken into 2 blocks, the GetElementPtr instruction being in the second half, and a compare instruction introduced in the first block fo
llowed by a branch instruction, which is linked to an "exitBlock" in case the array bounds check fails. Program execution stops if control flow reaches the "ex
itBlock". This is performed during compilation by invoking the pass using opt.

(2) The built-in pass "gvn" performs global value numbering as well as partial redundancy elimination.

(3)
    a) Constructing e-SSA form: As stated in the paper, the first 3 types of constraints are taken care of in the normal SSA form. e-SSA incorporates the remai
ning two constraints of the form - x < y and check A[x]. In our implementation, check A[x] is actually represented by a compare instruction. 
    The idea behind inserting PI instructions is to create a new SSA variable, which in a way, stores information about which branches (and as a result of which, what inequalities exist) were taken along different control paths. In our implementation, at every compare instruction, we insert a new basic block before e
ach of its successors. Inside these basic blocks we insert PI instructions for each value involved in the compare instruction. PI instruction is of the form -
x = pifunction_<variableTypeID>(x);. This ensures a new SSA value is generated when 'mem2reg' pass is invoked.
    
    b) Constructing inequality graph: